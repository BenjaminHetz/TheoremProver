CS 470 - Theorem Prover Programming Assignment

Here are the steps necessary to complete the program: 

1. Go over the code (prover.c) to make sure you understand how it stores the sentences and predicates. 
We have commented it to help you understand what everything is for.
2. Write the 'Resolve' function to implement your resolution strategy (set of support is a popular
strategy). This will certainly involve writing other various supporting functions to unify sentences,
perform substitutions, etc. 
 
If you find that the source code we provide is too difficult to follow you may want to start from
scratch with your own representation and so forth. 

Refer to the web page for more info


Heuristic Resolve Notes:
 The simplist idea we could come up with was to order the sentences by the number of predicates that match a 
 predicate in the sentence to resolve. This was also only counted if one was negated. Orginally, all this was 
 done in arrays since the entire project had been done with arrays thus far. However, C doesn't allow an array 
 to be returned, so this is our only use of int pointers.
 
 Right now we have one function for the hueristic ordering. First is a loop for every sentence to order. Within 
 that loop is a loop for each predicate in the current sentence. Within that is another loop for each predicate 
 in the sentence to resolve. If the sentences match, then we check if one of them are negated. If so, then we 
 increment our match counter. We then break whether or not the sentences were negated because there can't be both 
 a negated and non-negated predicate in the same sentence because of the form they are given to us in. Once all 
 the predicates for the current sentence are checked, the ordered list is then updated. To do this, first a loop 
 from 0 to the current sentence is run. Within this loop, we check if we are at the "end" of the current list.
 I.E. on the first sentence, the first position checked is 0. Since no items have been added to the list, this 
 is the end of the list so it is added at 0. This is done by comparing the current loop value (m) and the current 
 sentence value (s). If they are not equal, then we check if the number of matches on the current sentence is 
 greater than the number of matches from the last sentence (number of matches are stored in an array kept in the 
 same order as the ordered array, thus allowing position i of both ordered and matchlist to corrspond to the same 
 sentence. If this is true, then the position to add is set and we break from the loop. Then, if a position is 
 set, another loop is done from 1 past the last position of the loop to the position to add, setting each value 
 to the value before it. Finally, we set the value at the desired position to the new value. This ends the loop 
 on the sentences. Once it has ran through each sentence (loop finishes), the ordered int pointer is returned.
 
 After attempting to convert the code to java, then getting additional C code from class, as well as better 
 understanding what should happen in the project, we changed how our Heuristics were done. We have both a primary 
 and secondary priority used to order our PriorityQueue. The first and main priority or heuristic is essentially 
 the amount of change a sentence would have if it was resolved with it's pair. It checks each of the first sentences 
 predicates against each predicate from the second sentence. If a predicate from the first sentence matches from the 
 second sentence and their negated parts are not equal, then the heuristic gets a -1. If no predicate matches with a 
 negation, then it gets a +1. In essence, IF resolution was done on multiple predicates at once, then this value would 
 tell you how much the length of the second sentence would change. The second priority is how long first sentence is. 
 In both cases we want the minimum value. We sort the priority queue based on the smallest values from the first 
 priorities. If they are equal, we then sort based on the smallest second priorities. This means we would get the pair 
 that would result in the greatest reduction and whose first sentence is the shortest. While this would be a great 
 heuristic if multiple predicate resolution was implemented, we ran out of time and couldn't do that. Because of that 
 the heuristic is both good and bad since one 1 predicate can be resolved at a time. In general, if random is near 
 perfect it is better then our heuristic and about the same or worse in all other cases based on both steps and time.
